{
  "stats": {
    "suites": 3,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-16T19:52:31.965Z",
    "end": "2022-06-16T19:52:32.503Z",
    "duration": 538,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "65868004-98cc-40b4-8b50-6cafcbbfc139",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
          "title": "fhem-log2db",
          "fullFile": "/home/runner/work/fhem-log2db/fhem-log2db/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "config",
              "fullTitle": "fhem-log2db config",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield (0, lib_1.default)('config', []);\n});",
              "err": {},
              "uuid": "ebcee835-d9f5-4c67-96e5-d45db2d0383d",
              "parentUUID": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sync",
              "fullTitle": "fhem-log2db sync",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield (0, lib_1.default)('sync', []);\n});",
              "err": {},
              "uuid": "37f01204-1007-4a12-b969-100ffbcb014f",
              "parentUUID": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clean",
              "fullTitle": "fhem-log2db clean",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield (0, lib_1.default)('clean', []);\n});",
              "err": {},
              "uuid": "05dc0c70-7be1-446e-acd8-99e103f805d8",
              "parentUUID": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cron",
              "fullTitle": "fhem-log2db cron",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield (0, lib_1.default)('cron', []);\n});",
              "err": {},
              "uuid": "17c324bb-75b6-49b2-adec-e879629043e9",
              "parentUUID": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "fhem-log2db default",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield (0, lib_1.default)('-', []);\n});",
              "err": {},
              "uuid": "d1c8c68a-ceae-4fdf-84ff-3fc47a6761ff",
              "parentUUID": "dc32e8d3-88f7-4ebc-9e8f-48a7e0c0c6f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "816e8f54-cdba-4a4d-964b-befb9713560b",
              "title": "isRunning()",
              "fullFile": "/home/runner/work/fhem-log2db/fhem-log2db/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with existing pids",
                  "fullTitle": "fhem-log2db isRunning() should work with existing pids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert_1.default.equal((0, lib_1.isRunning)(process.pid), true);\n});",
                  "err": {},
                  "uuid": "08c72119-1b7c-44e2-a23a-5f34d3b07d46",
                  "parentUUID": "816e8f54-cdba-4a4d-964b-befb9713560b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with non existing pids",
                  "fullTitle": "fhem-log2db isRunning() should work with non existing pids",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert_1.default.equal((0, lib_1.isRunning)(10000), false);\n});",
                  "err": {},
                  "uuid": "e26e2564-494e-408f-bb38-4daf154072a9",
                  "parentUUID": "816e8f54-cdba-4a4d-964b-befb9713560b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08c72119-1b7c-44e2-a23a-5f34d3b07d46",
                "e26e2564-494e-408f-bb38-4daf154072a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [
            "ebcee835-d9f5-4c67-96e5-d45db2d0383d",
            "37f01204-1007-4a12-b969-100ffbcb014f",
            "05dc0c70-7be1-446e-acd8-99e103f805d8",
            "17c324bb-75b6-49b2-adec-e879629043e9",
            "d1c8c68a-ceae-4fdf-84ff-3fc47a6761ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 513,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e5b2b691-d1dc-4b86-af7a-3abce6acbb29",
          "title": "parseLine",
          "fullFile": "/home/runner/work/fhem-log2db/fhem-log2db/test/lib/line-parser.ts",
          "file": "/test/lib/line-parser.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should work",
              "fullTitle": "parseLine should work",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const l = (0, line_parser_1.parseLine)('2022-01-01_02:30:41 ZWave_SENSOR_MULTILEVEL_3 battery: 100');\n    assert.deepStrictEqual(l, {\n        timestamp: new Date('2022-01-01T02:30:41'),\n        device: 'ZWave_SENSOR_MULTILEVEL_3',\n        event: 'battery: 100',\n        reading: 'battery',\n        value: '100',\n        unit: null\n    });\n});",
              "err": {},
              "uuid": "b3ac1d94-1a22-44d1-96eb-e0ff090f40a3",
              "parentUUID": "e5b2b691-d1dc-4b86-af7a-3abce6acbb29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle float units",
              "fullTitle": "parseLine should handle float units",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const l = (0, line_parser_1.parseLine)('2022-01-01_02:30:41 ZWave_SENSOR_MULTILEVEL_3 battery: 100.0 %');\n    assert.deepStrictEqual(l, {\n        timestamp: new Date('2022-01-01T02:30:41'),\n        device: 'ZWave_SENSOR_MULTILEVEL_3',\n        event: 'battery: 100.0 %',\n        reading: 'battery',\n        value: '100.0',\n        unit: '%'\n    });\n});",
              "err": {},
              "uuid": "a09b48f9-0b17-4995-9ed6-e3b89fa6db48",
              "parentUUID": "e5b2b691-d1dc-4b86-af7a-3abce6acbb29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle timestamps",
              "fullTitle": "parseLine should handle timestamps",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const l = (0, line_parser_1.parseLine)('2022-01-01_02:30:41 ZWave_SENSOR_MULTILEVEL_3 time: 2022-1-23 16:29:1');\n    assert.deepStrictEqual(l, {\n        timestamp: new Date('2022-01-01T02:30:41'),\n        device: 'ZWave_SENSOR_MULTILEVEL_3',\n        event: 'time: 2022-1-23 16:29:1',\n        reading: 'time',\n        value: '2022-1-23 16:29:1',\n        unit: null\n    });\n});",
              "err": {},
              "uuid": "21f8277d-4252-4c99-89fb-6150e479870b",
              "parentUUID": "e5b2b691-d1dc-4b86-af7a-3abce6acbb29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3ac1d94-1a22-44d1-96eb-e0ff090f40a3",
            "a09b48f9-0b17-4995-9ed6-e3b89fa6db48",
            "21f8277d-4252-4c99-89fb-6150e479870b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}